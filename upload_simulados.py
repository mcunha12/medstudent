import os
import json
import uuid
import gspread
import pandas as pd
import toml  # Biblioteca para ler o arquivo .toml
from pathlib import Path

# --- CONFIGURA√á√ÉO ---
# Caminho para a pasta onde est√£o seus arquivos JSON de simulados.
# O script assume que ele est√° na raiz do projeto "medstudent".
BASE_DIR = Path(__file__).parent
SIMULADOS_DIR = BASE_DIR / "simulados"
SECRETS_FILE_PATH = BASE_DIR / ".streamlit" / "secrets.toml"


# --- CONEX√ÉO COM GOOGLE SHEETS (M√âTODO SIMPLIFICADO) ---
def connect_to_google_sheets():
    """Conecta ao Google Sheets usando as credenciais do secrets.toml."""
    print("üîë Lendo arquivo de segredos...")
    try:
        if not SECRETS_FILE_PATH.exists():
            raise FileNotFoundError(f"Arquivo de segredos n√£o encontrado em: {SECRETS_FILE_PATH}")

        secrets = toml.load(SECRETS_FILE_PATH)
        
        creds_dict = dict(secrets["gcp_service_account"])
        sheet_name = secrets["gcs"]["sheet_name"]

        gc = gspread.service_account_from_dict(creds_dict)
        spreadsheet = gc.open(sheet_name)
        print("‚úÖ Conectado com sucesso ao Google Sheets.")
        return spreadsheet.worksheet("questions")
    except FileNotFoundError as e:
        print(f"‚ùå Erro: {e}")
        print("Certifique-se de que o arquivo .streamlit/secrets.toml existe na raiz do seu projeto.")
        return None
    except Exception as e:
        print(f"‚ùå Erro fatal ao conectar com o Google Sheets: {e}")
        print("Verifique o conte√∫do do seu arquivo .streamlit/secrets.toml.")
        return None

def upload_local_simulados():
    """
    Fun√ß√£o principal que l√™ os JSONs locais e os envia para a planilha.
    """
    print("üöÄ Iniciando script de upload de simulados...")
    
    questions_sheet = connect_to_google_sheets()
    if not questions_sheet:
        return # Encerra se a conex√£o falhar

    # 1. Obter todas as quest√µes existentes para evitar duplicatas
    print("üìä Buscando quest√µes existentes na planilha...")
    try:
        existing_questions_df = pd.DataFrame(questions_sheet.get_all_records())
        # Usamos um set para uma verifica√ß√£o de exist√™ncia muito mais r√°pida
        existing_enunciados = set(existing_questions_df['enunciado']) if not existing_questions_df.empty else set()
        print(f"üîç Encontradas {len(existing_enunciados)} quest√µes existentes.")
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel buscar quest√µes existentes. Pode haver duplicatas. Erro: {e}")
        existing_enunciados = set()

    # 2. Ler todos os arquivos JSON da pasta de simulados
    if not SIMULADOS_DIR.exists():
        print(f"‚ùå A pasta de simulados n√£o foi encontrada em: {SIMULADOS_DIR}")
        return
        
    json_files = list(SIMULADOS_DIR.glob('*.json'))
    if not json_files:
        print(f"‚ùå Nenhum arquivo .json encontrado na pasta: {SIMULADOS_DIR}")
        return

    print(f"\nüìÇ Encontrados {len(json_files)} arquivos JSON para processar.")

    new_questions_to_upload = []
    total_questions_in_files = 0

    for file_path in json_files:
        print(f"\n--- Processando arquivo: {file_path.name} ---")
        with open(file_path, 'r', encoding='utf-8') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è Erro de formata√ß√£o no arquivo {file_path.name}. Pulando.")
                continue

            # O JSON pode ser um objeto √∫nico ou uma lista de objetos
            questions_in_file = data if isinstance(data, list) else [data]
            total_questions_in_files += len(questions_in_file)

            for question_data in questions_in_file:
                enunciado = question_data.get("enunciado")
                if not enunciado:
                    print("‚ö†Ô∏è Quest√£o sem 'enunciado' encontrada. Pulando.")
                    continue

                # 3. Verificar se a quest√£o j√° existe
                if enunciado in existing_enunciados:
                    print(f"üîµ Quest√£o duplicada encontrada. Pulando: '{enunciado[:50]}...'")
                    continue
                
                # 4. Se for nova, preparar para o upload
                print(f"‚ú® Nova quest√£o encontrada: '{enunciado[:50]}...'")
                
                # Formata a linha para o Google Sheets
                new_row = [
                    str(uuid.uuid4()),  # Gera um novo ID √∫nico
                    enunciado,
                    json.dumps(question_data.get("alternativas", {})),
                    json.dumps(question_data.get("comentarios", {})),
                    question_data.get("alternativa_correta", ""),
                    ", ".join(question_data.get("areas_principais", [])),
                    ", ".join(question_data.get("subtopicos", []))
                ]
                new_questions_to_upload.append(new_row)
                existing_enunciados.add(enunciado)

    # 5. Fazer o upload de todas as novas quest√µes de uma vez
    if new_questions_to_upload:
        print(f"\n‚¨ÜÔ∏è Enviando {len(new_questions_to_upload)} novas quest√µes para a planilha...")
        try:
            questions_sheet.append_rows(new_questions_to_upload, value_input_option='USER_ENTERED')
            print("‚úÖ Upload conclu√≠do com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro durante o upload em lote para o Google Sheets: {e}")
    else:
        print("\n‚úÖ Nenhuma quest√£o nova para adicionar.")

    # 6. Relat√≥rio Final
    print("\n--- Relat√≥rio Final ---")
    print(f"Arquivos JSON lidos: {len(json_files)}")
    print(f"Total de quest√µes nos arquivos: {total_questions_in_files}")
    print(f"Novas quest√µes adicionadas √† planilha: {len(new_questions_to_upload)}")
    print("üèÅ Script finalizado.")

if __name__ == "__main__":
    # Adiciona a depend√™ncia 'toml' se necess√°rio. O Streamlit geralmente j√° a inclui.
    try:
        import toml
    except ImportError:
        print("Biblioteca 'toml' n√£o encontrada. Instalando...")
        import subprocess
        import sys
        subprocess.check_call([sys.executable, "-m", "pip", "install", "toml"])

    upload_local_simulados()
